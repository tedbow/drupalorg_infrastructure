=== modified file 'modules/node/node.install'
--- modules/node/node.install	2012-08-02 18:50:52 +0000
+++ modules/node/node.install	2012-09-20 18:33:03 +0000
@@ -601,6 +601,7 @@
 
 /**
  * Convert body and teaser from node properties to fields, and migrate status/comment/promote and sticky columns to the {node_revision} table.
+ * @note D7 This update routine was altered for speed reasons.
  */
 function node_update_7006(&$sandbox) {
   $sandbox['#finished'] = 0;
@@ -689,7 +690,7 @@
     $found = FALSE;
     if ($sandbox['total']) {
       // Operate on every revision of every node (whee!), in batches.
-      $batch_size = 200;
+      $batch_size = 20000; // @note D7 Default is 200.
       $query = db_select('node_revision', 'nr');
       $query->innerJoin('node', 'n', 'n.nid = nr.nid');
       $query
@@ -700,6 +701,9 @@
         ->range(0, $batch_size);
       $revisions = $query->execute();
 
+      // Start a transaction for speed reasons.
+      $transaction = db_transaction();
+
       // Load each revision of each node, set up 'body'
       // appropriately, and save the node's field data.  Note that
       // node_load() will not return the body or teaser values from
@@ -767,6 +771,7 @@
     }
 
     if (!$found) {
+      // @note Transaction is autocommitted at this point if we're done.
       // All nodes are processed.
 
       // Remove the now-obsolete body info from node_revision.
@@ -782,6 +787,7 @@
       $sandbox['#finished'] = 1;
     }
   }
+  // @note Transaction is autocommitted at this point if we're not done.
 }
 
 /**

=== modified file 'modules/system/system.install'
--- modules/system/system.install	2012-08-02 18:56:52 +0000
+++ modules/system/system.install	2012-09-20 18:29:46 +0000
@@ -2722,6 +2722,7 @@
 
 /**
  * Migrate upload.module data to the newly created file field.
+ * @note D7 This update routine was altered for speed reasons.
  */
 function system_update_7061(&$sandbox) {
   if (!db_table_exists('upload')) {
@@ -2760,23 +2761,16 @@
   // Retrieve information on all the files attached to these revisions.
   if (!empty($vids)) {
     $node_revisions = array();
-    $result = db_query('SELECT u.fid, u.vid, u.list, u.description, n.nid, n.type, u.weight FROM {upload} u INNER JOIN {node_revision} nr ON u.vid = nr.vid INNER JOIN {node} n ON n.nid = nr.nid WHERE u.vid IN (:vids) ORDER BY u.vid, u.weight, u.fid', array(':vids' => $vids));
+    $result = db_query('SELECT u.fid, u.vid, u.list AS display, u.description, n.nid, n.type, u.weight, f.fid AS ffid, f.uid, f.filename, f.filepath, f.filemime, f.filesize, f.status, f.timestamp FROM {upload} u INNER JOIN {node_revision} nr ON u.vid = nr.vid INNER JOIN {node} n ON n.nid = nr.nid LEFT JOIN {files} f ON f.fid = u.fid WHERE u.vid IN (:vids) ORDER BY u.vid, u.weight, u.fid', array(':vids' => $vids));
     foreach ($result as $record) {
-      // For each uploaded file, retrieve the corresponding data from the old
-      // files table (since upload doesn't know about the new entry in the
-      // file_managed table).
-      $file = db_select('files', 'f')
-        ->fields('f', array('fid', 'uid', 'filename', 'filepath', 'filemime', 'filesize', 'status', 'timestamp'))
-        ->condition('f.fid', $record->fid)
-        ->execute()
-        ->fetchAssoc();
-      if (!$file) {
+      // Reassemble the file object from the record if available.
+      if (!$record->ffid) {
         continue;
       }
-
-      // Add in the file information from the upload table.
-      $file['description'] = $record->description;
-      $file['display'] = $record->list;
+      $file = array();
+      foreach (array('fid', 'uid', 'filename', 'filepath', 'filemime', 'filesize', 'status', 'timestamp', 'description', 'display') AS $var) {
+        $file[$var] = $record->{$var};
+      }
 
       // Create one record for each revision that contains all the uploaded
       // files.
@@ -2791,6 +2785,8 @@
     // upload field on their node revisions.
     $basename = variable_get('file_directory_path', conf_path() . '/files');
     $scheme = file_default_scheme() . '://';
+    // Wrap the query spamming in a transaction.
+    $transaction = db_transaction();
     foreach ($node_revisions as $vid => $revision) {
       foreach ($revision['file'][LANGUAGE_NONE] as $delta => $file) {
         // We will convert filepaths to uri using the default scheme
@@ -2841,6 +2837,7 @@
 
   // If there's no max value then there's nothing to update and we're finished.
   if (empty($sandbox['max']) || isset($finished)) {
+    // @note Transaction is autocommitted at this point if we're done.
     db_drop_table('upload');
     db_drop_table('system_update_7061');
     return t('Upload module has been migrated to File module.');
@@ -2849,6 +2846,7 @@
     // Indicate our current progress to the batch update system.
     $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
   }
+  // @note Transaction is autocommitted at this point if we're not done.
 }
 
 /**

=== modified file 'modules/taxonomy/taxonomy.install'
--- modules/taxonomy/taxonomy.install	2012-08-02 18:56:52 +0000
+++ modules/taxonomy/taxonomy.install	2012-09-20 19:06:46 +0000
@@ -520,8 +520,7 @@
 /**
  * Migrate {taxonomy_term_node} table to field storage.
  *
- * @todo: This function can possibly be made much faster by wrapping a
- * transaction around all the inserts.
+ * @note D7 This update routine was altered for speed reasons.
  */
 function taxonomy_update_7005(&$sandbox) {
   // $sandbox contents:
@@ -688,7 +687,7 @@
   }
   else {
     // We do each pass in batches of 1000.
-    $batch = 1000;
+    $batch = 10000;
 
     $result = db_query_range('SELECT vocab_id, tid, nid, vid, type, created, sticky, is_current FROM {taxonomy_update_7005} ORDER BY n', $sandbox['last'], $batch);
     if (isset($sandbox['cursor'])) {
@@ -698,6 +697,8 @@
     else {
       $deltas = array();
     }
+    // Open a transaction for speed reasons.
+    $transaction = db_transaction();
     foreach ($result as $record) {
       $sandbox['count'] += 1;
 
@@ -779,6 +780,7 @@
     $sandbox['#finished'] = FALSE;
   }
   else {
+    // @note Transaction is autocommitted at this point if we're done.
     db_drop_table('taxonomy_vocabulary_node_type');
     db_drop_table('taxonomy_term_node');
 
@@ -805,6 +807,7 @@
       }
     }
   }
+  // @note Transaction is autocommitted at this point if we're not done.
 }
 
 /**

=== modified file 'modules/user/user.install'
--- modules/user/user.install	2012-08-02 18:56:52 +0000
+++ modules/user/user.install	2012-09-20 19:15:37 +0000
@@ -477,6 +477,14 @@
  * Convert user time zones from time zone offsets to time zone names.
  */
 function user_update_7002(&$sandbox) {
+
+  // @note D7 The sandbox portions of this update are pointless for d.o.
+  // Shave off about an hour by doing the whole thing at once.
+  db_query("UPDATE {users} SET timezone = NULL");
+  db_change_field('users', 'timezone', 'timezone', array('type' => 'varchar', 'length' => 32, 'not null' => FALSE));
+  return;
+
+
   $sandbox['#finished'] = 0;
 
   // Multi-part update.

